diff --git a/browser/chrome/browser/content/browser/tabbrowser/tabbrowser.js b/browser/chrome/browser/content/browser/tabbrowser/tabbrowser.js
index fec3dc8..1e0469f 100644
--- ./browser/chrome/browser/content/browser/tabbrowser/tabbrowser.js
+++ ./browser/chrome/browser/content/browser/tabbrowser/tabbrowser.js
@@ -3330,6 +3330,26 @@
         let tab;
         let tabWasReused = false;
 
+        /*@nora:inject:start*/
+        if (tabData.floorpDisableHistory) {
+          continue;
+        }
+
+        let floorpWorkspaceId,
+          floorpLastShowWorkspaceId,
+          floorpSSB;
+
+        floorpWorkspaceId = tabData.floorpWorkspaceId
+          ? tabData.floorpWorkspaceId
+          : JSON.parse(Services.prefs.getStringPref("floorp.workspaces.v3.data"))
+              .workspaces[0].id;
+        floorpLastShowWorkspaceId = tabData.floorpLastShowWorkspaceId;
+        floorpSSB = tabData.floorpSSB;
+
+        if (floorpSSB) {
+          window.close();
+        }
+        /*@nora:inject:end*/
         // Re-use existing selected tab if possible to avoid the overhead of
         // selecting a new tab. For now, we only do this for horizontal tabs;
         // we'll let tabs.js handle pinning for vertical tabs until we unify
@@ -3342,6 +3362,22 @@
         ) {
           tabWasReused = true;
           tab = this.selectedTab;
+          /*@nora:inject:start*/
+          if (floorpWorkspaceId) {
+            tab.setAttribute("floorpWorkspaceId", floorpWorkspaceId);
+          }
+
+          if (floorpLastShowWorkspaceId) {
+            tab.setAttribute(
+              "floorpWorkspaceLastShowId",
+              floorpLastShowWorkspaceId
+            );
+          }
+
+          if (floorpSSB) {
+            tab.setAttribute("floorpSSB", floorpSSB);
+          }
+          /*@nora:inject:end*/
           if (!tabData.pinned) {
             this.unpinTab(tab);
           } else {
@@ -3391,6 +3427,23 @@
             preferredRemoteType,
           });
 
+          /*@nora:inject:start*/
+          if (floorpWorkspaceId) {
+            tab.setAttribute("floorpWorkspaceId", floorpWorkspaceId);
+          }
+
+          if (floorpLastShowWorkspaceId) {
+            tab.setAttribute(
+              "floorpWorkspaceLastShowId",
+              floorpLastShowWorkspaceId
+            );
+          }
+
+          if (floorpSSB) {
+            tab.setAttribute("floorpSSB", floorpSSB);
+          }
+          /*@nora:inject:end*/
+
           if (select) {
             tabToSelect = tab;
           }
@@ -4395,6 +4448,14 @@
         aTab,
         this
       );
+      /*@nora:inject:start*/
+      // Force to close & Make do not save history of the tab.
+      try {
+        this._endRemoveTab(aTab);
+      } catch (e) {
+        console.warn(e);
+      }
+      /*@nora:inject:end*/
     },
 
     _hasBeforeUnload(aTab) {
