# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

name: "(A) 📦️ Package"
on:
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        default: Windows-x64
        options:
          - Windows-x64
          - Linux-x64
          - macOS-x64
      runtime_artifact_workflow_run_id:
        type: string
        required: true

  workflow_call:
    inputs:
      platform:
        type: string
        default: Windows-x64
      runtime_artifact_workflow_run_id:
        type: string
        required: true

run-name: 📦️ Package ${{ inputs.platform }}
jobs:
  main:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: Floorp-Projects/Floorp-12-runtime
          submodules: "recursive"

      - uses: actions/checkout@v4
        with:
          path: "floorp"

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Floorp
        run: |

          cd $GITHUB_WORKSPACE
          cd ./floorp
          pnpm install
          cd ..

      - name: Setup 🪛
        run: |
          sudo apt install msitools -y

          ./mach --no-interactive bootstrap --application-choice browser_artifact_mode

      - name: Write Versions
        run: |
          cd ./floorp
          pnpm build --write-version
          cd ..

      - name: Mach configure
        run: |
          if [ "${{inputs.platform}}" == "Windows-x64" ]; then
            cp ./.github/workflows/mozconfigs/win64.mozconfig mozconfig
          elif [ "${{inputs.platform}}" == "Linux-x64" ]; then
            cp ./.github/workflows/mozconfigs/linux64.mozconfig mozconfig
          else
            cp ./.github/workflows/mozconfigs/macosx64-x86_64.mozconfig mozconfig
          fi

          # Copy Noraneko Branding
          cp -r ./floorp/gecko/branding/* ./browser/branding/

          mkdir floorp/gecko/config/autogenerated
          echo "$(cat browser/config/version.txt)@$(cat floorp/gecko/config/version.txt)" >> floorp/gecko/config/autogenerated/version.txt
          echo "$(cat browser/config/version_display.txt)@$(cat floorp/gecko/config/version_display.txt)" >> floorp/gecko/config/autogenerated/version_display.txt
          echo "ac_add_options --with-version-file-path=floorp/gecko/config/autogenerated" >> mozconfig
          # sed -i 's|ac_add_options --disable-maintenance-service|#ac_add_options --disable-maintenance-service|g' ./mozconfig
          sed -i 's|ac_add_options --disable-updater||g' ./mozconfig
          sed -i 's|ac_add_options --enable-unverified-updates||g' ./mozconfig

          echo "ac_add_options --enable-release" >> mozconfig
          echo "ac_add_options --enable-update-channel=alpha" >> mozconfig
          echo "ac_add_options --enable-artifact-builds" >> mozconfig

          sed -i 's|MOZ_BRANDING_DIRECTORY=browser/branding/unofficial|MOZ_BRANDING_DIRECTORY=browser/branding/floorp-official|g' ./browser/confvars.sh
          sed -i 's|ac_add_options --enable-chrome-format=flat||g' ./mozconfig

          if [ "${{inputs.platform}}" == "macOS-x64" ]; then
            # Extract macOS .dmg tools
            mkdir -p ~/tools
            curl -L https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/ceSQWV1AS76UlhYJ0_PfJQ/artifacts/public/build/dmg.tar.zst -o dmg.tar.zst
            tar -I zstd -xf dmg.tar.zst -C ~/tools
            sudo chmod 777 ~/tools/dmg

            curl -L https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/N2SwCRLrRw2l-UWP4N7dhQ/artifacts/public/build/hfsplus.tar.zst -o hfsplus.tar.zst
            tar -I zstd -xf hfsplus.tar.zst -C ~/tools
            sudo chmod 777 ~/tools/hfsplus

            # write mozconfig
            echo "DMG_TOOL=$(echo ~/tools/dmg/dmg)" >> mozconfig
            echo "HFS_TOOL=$(echo ~/tools/dmg/hfsplus)" >> mozconfig
            echo "MKFSHFS=$(echo ~/tools/hfsplus/newfs_hfs)" >> mozconfig
          fi

          ./mach configure
          git apply --ignore-space-change --ignore-whitespace .github/patches/packaging/*.patch

      - name: Download artifact for Windows
        if: ${{inputs.platform == 'Windows-x64'}}
        uses: actions/download-artifact@v4
        with:
          name: 'floorp-win-amd64-moz-artifact'
          run-id: ${{inputs.runtime_artifact_workflow_run_id}}
          github-token: ${{github.token}}
          repository: Floorp-Projects/Floorp-12-runtime
          path: ~/downloads

      - name: Download artifact for Linux
        if: ${{inputs.platform == 'Linux-x64'}}
        uses: actions/download-artifact@v4
        with:
          name: 'floorp-linux-amd64-moz-artifact'
          run-id: ${{inputs.runtime_artifact_workflow_run_id}}
          github-token: ${{github.token}}
          repository: Floorp-Projects/Floorp-12-runtime
          path: ~/downloads

      - name: Download artifact for macOS
        if: ${{inputs.platform == 'macOS-x64'}}
        uses: actions/download-artifact@v4
        with:
          name: 'floorp-mac-universal-moz-artifact'
          run-id: ${{inputs.runtime_artifact_workflow_run_id}}
          github-token: ${{github.token}}
          repository: Floorp-Projects/Floorp-12-runtime
          path: ~/downloads

      - name: Make Downloaded Artifact to Moz Artifact
        run: |
          mkdir -p ~/artifacts
          cd ~/downloads
          if [ "${{inputs.platform}}" == "Windows-x64" ]; then
            zip -r ~/artifacts/moz-artifact-win64.zip ./*
          elif [ "${{inputs.platform}}" == "Linux-x64" ]; then
            tar -cjf ~/artifacts/moz-artifact-linux64.tar.bz2 ./*
          else
            cp -r ~/downloads/* ~/artifacts
          fi

          cd $GITHUB_WORKSPACE

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: moz-artifact
          path: ~/artifacts

      - name: Build Floorp
        run: |
          cd ./floorp
          NODE_ENV='production' pnpm build --release-build-before
          cd ..

      - name: Build
        run: |
          if [ "${{inputs.platform}}" == "Windows-x64" ]; then
            MOZ_ARTIFACT_FILE=$(echo ~/artifacts/moz-artifact-win64.zip) ./mach build
          elif [ "${{inputs.platform}}" == "Linux-x64" ]; then
            MOZ_ARTIFACT_FILE=$(echo ~/artifacts/moz-artifact-linux64.tar.bz2) ./mach build
          elif [ "${{inputs.platform}}" == "macOS-x64" ]; then
            MOZ_ARTIFACT_FILE=$(echo ~/artifacts/floorp-macOS-universal-moz-artifact.dmg) ./mach build
          fi

      - name: Inject Floorp
        run: |
          # obj folder name
          if [ "${{inputs.platform}}" == "Windows-x64" ]; then
            OBJ_FOLDER=$(echo ./obj-x86_64-pc-windows-msvc)
          elif [ "${{inputs.platform}}" == "Linux-x64" ]; then
            OBJ_FOLDER=$(echo ./obj-x86_64-pc-linux-gnu)
          elif [ "${{inputs.platform}}" == "macOS-x64" ]; then
            sudo chmod 777 executablefile ~/tools/dmg
            OBJ_FOLDER=$(echo ./obj-x86_64-apple-darwin)
          fi

          cd ./floorp
          pnpm build --release-build-after

          # https://www.spinics.net/lists/git/msg391750.html
          rsync -aL $OBJ_FOLDER/dist/bin/ $OBJ_FOLDER/dist/tmp__bin
          rm -rf $OBJ_FOLDER/dist/bin
          mv $OBJ_FOLDER/dist/tmp__bin $OBJ_FOLDER/dist/bin

          git apply --reject ./scripts/git-patches/patches/*.patch --directory ../$OBJ_FOLDER/dist/bin --unsafe-paths --check --apply
          cd ..

      - name: Package noraneko
        run: |
          ./mach package

      # - name: Download artifact of MAR tools
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: ${{'noraneko-dist-host'}}
      #     run-id: ${{inputs.runtime_artifact_workflow_run_id}}
      #     github-token: ${{github.token}}
      #     repository: ${{github.repository}}-runtime
      #     path: obj-x86_64-pc-windows-msvc/dist/host

      # - name: Download artifact of binary for getting buildid
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: ${{'noraneko-win-amd64-dev'}}
      #     run-id: ${{inputs.runtime_artifact_workflow_run_id}}
      #     github-token: ${{github.token}}
      #     repository: ${{github.repository}}-runtime
      #     path: ~/noraneko-dev

      # - name: Create MAR package
      #   run: |
      #     7za x "$(echo ~/noraneko-dev/noraneko-*.win64.zip)" -o"$(echo ~)/noraneko-dev"

      #     chmod +x $(echo ./obj-*)/dist/host/bin/mar
      #     mkdir ~/noraneko-mar

      #     awk -F "=" '/^Version/ {print $2}' "$(echo ~)/noraneko-dev/noraneko/application.ini" > ~/noraneko-mar/version.txt

      #     touch "$(echo ./obj-*)/dist/noraneko/precomplete"
      #     MAR="$(echo ./obj-*)/dist/host/bin/mar" MOZ_PRODUCT_VERSION=$(cat ~/noraneko-mar/version.txt) MAR_CHANNEL_ID=alpha ./tools/update-packaging/make_full_update.sh ~/noraneko-mar/noraneko-win-amd64-full.mar "$(echo ./obj-*)/dist/noraneko"

      #     cp noraneko/gecko/config/version.txt ~/noraneko-mar/noraneko_version.txt
      #     cp noraneko/_dist/buildid2 ~/noraneko-mar/noraneko_buildid.txt
      #     echo "$(cat ~/noraneko-mar/version.txt)@$(cat ~/noraneko-mar/noraneko_version.txt)" > ~/noraneko-mar/version_display.txt

      #     shasum --algorithm 512 ~/noraneko-mar/noraneko-win-amd64-full.mar | cut -c 1-128 > ~/noraneko-mar/mar_shasum.txt
      #     stat --format "%s" ~/noraneko-mar/noraneko-win-amd64-full.mar > ~/noraneko-mar/mar_size.txt

      #     awk -F "=" '/BuildID/ {print $2}' "$(echo ~)/noraneko-dev/noraneko/application.ini" > ~/noraneko-mar/buildid.txt

      #     mkdir ~/noraneko-publish

      #     echo "{" >> ~/noraneko-publish/meta.json
      #     echo "\"version_display\":\"$(cat ~/noraneko-mar/version_display.txt)\"," >> ~/noraneko-publish/meta.json
      #     echo "\"version\":\"$(cat ~/noraneko-mar/version.txt)\"," >> ~/noraneko-publish/meta.json
      #     echo "\"noraneko_version\":\"$(cat ~/noraneko-mar/noraneko_version.txt)\"," >> ~/noraneko-publish/meta.json
      #     echo "\"noraneko_buildid\":\"$(cat ~/noraneko-mar/noraneko_buildid.txt)\"," >> ~/noraneko-publish/meta.json
      #     echo "\"mar_size\":\"$(cat ~/noraneko-mar/mar_size.txt)\"," >> ~/noraneko-publish/meta.json
      #     echo "\"mar_shasum\":\"$(cat ~/noraneko-mar/mar_shasum.txt)\"," >> ~/noraneko-publish/meta.json
      #     echo "\"buildid\":\"$(cat ~/noraneko-mar/buildid.txt)\"" >> ~/noraneko-publish/meta.json
      #     echo "}" >> ~/noraneko-publish/meta.json

      #     cp ~/noraneko-mar/*.mar ~/noraneko-publish

      - name: Publish Installer 🎁
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-win-amd64-installer
          path: obj-*/dist/install/sea/*

      # - name: Publish MAR 🎁
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: noraneko-win-amd64-mar-full
      #     path: ~/noraneko-publish/*
